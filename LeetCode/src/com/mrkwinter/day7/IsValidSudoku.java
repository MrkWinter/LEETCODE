package com.mrkwinter.day7;

/**
 * @author MrkWinter
 * @version 1.0
 * 36. 有效的数独
 * 中等
 * 1.1K
 * 相关企业
 * <p>
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * <p>
 * <p>
 * <p>
 * 注意：
 * <p>
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * <p>
 * 示例 2：
 * <p>
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字（1-9）或者 '.'
 */
public class IsValidSudoku {
    public static void main(String[] args) {
        char[][] chars = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'}
                , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
                , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
                , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
                , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
                , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
                , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
                , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
                , {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        char[][] charss = {{'.', '.', '5', '.', '.', '.', '.', '.', '.'}
                , {'.', '.', '.', '8', '.', '.', '.', '3', '.'}
                , {'.', '5', '.', '.', '2', '.', '.', '.', '.'}
                , {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
                , {'.', '.', '.', '.', '.', '.', '.', '.', '9'}
                , {'.', '.', '.', '.', '.', '.', '4', '.', '.'}
                , {'.', '.', '.', '.', '.', '.', '.', '.', '7'}
                , {'.', '1', '.', '.', '.', '.', '.', '.', '.'}
                , {'2', '4', '.', '.', '.', '.', '9', '.', '.'}};
        boolean validSudoku = new IsValidSudoku().isValidSudoku(charss);
        System.out.println(validSudoku);
    }

    public boolean isValidSudoku(char[][] board) {
        boolean flag = true;
        //检测每一行
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (Character.isDigit(board[i][j])) {
                    for (int k = j + 1; k < board[0].length; k++) {
                        if (board[i][k] == board[i][j]) {
                            flag = false;
                        }
                    }
                }
            }
        }
        //检测每一列
        for (int i = 0; i < board[0].length; i++) {
            for (int j = 0; j < board.length; j++) {
                if (Character.isDigit(board[j][i])) {
                    for (int k = j + 1; k < board.length; k++) {
                        if (board[k][i] == board[j][i]) {
                            flag = false;
                        }
                    }
                }
            }
        }
        //检测每一小方格
        for (int i = 0; i < board.length; i += 3) {
            for (int j = 0; j < board[0].length; j += 3) {
                //行
                for (int k = i; k < i + 3; k++) {
                    //列
                    for (int l = j; l < j + 3; l++) {

                        if (Character.isDigit(board[k][l])) {
                            for (int m = k; m < i + 3; m++) {
                                for (int n = j; n < j + 3; n++) {
                                    if (board[m][n] == board[k][l] && (m != k && n != l)) {
                                        flag = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return flag;
    }
}
